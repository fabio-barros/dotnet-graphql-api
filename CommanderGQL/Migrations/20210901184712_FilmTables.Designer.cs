// <auto-generated />
using System;
using CommanderGQL.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CommanderGQL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210901184712_FilmTables")]
    partial class FilmTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ActorFilm", b =>
                {
                    b.Property<Guid>("ActorsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FilmsId")
                        .HasColumnType("uuid");

                    b.HasKey("ActorsId", "FilmsId");

                    b.HasIndex("FilmsId");

                    b.ToTable("ActorFilm");
                });

            modelBuilder.Entity("CommanderGQL.Models.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("CommanderGQL.Models.Command", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CommandLine")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HowTo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PlataformId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlataformId");

                    b.ToTable("Commands");
                });

            modelBuilder.Entity("CommanderGQL.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("CommanderGQL.Models.CrewMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("CrewMembers");
                });

            modelBuilder.Entity("CommanderGQL.Models.Director", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("CommanderGQL.Models.Film", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Aspect")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("DirectorConnection")
                        .HasColumnType("uuid");

                    b.Property<int>("Length")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Year")
                        .HasMaxLength(4)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DirectorConnection");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("CommanderGQL.Models.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("CommanderGQL.Models.Plataform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LicenseKey")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Plataforms");
                });

            modelBuilder.Entity("CountryFilm", b =>
                {
                    b.Property<Guid>("CountriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FilmsId")
                        .HasColumnType("uuid");

                    b.HasKey("CountriesId", "FilmsId");

                    b.HasIndex("FilmsId");

                    b.ToTable("CountryFilm");
                });

            modelBuilder.Entity("CrewMemberFilm", b =>
                {
                    b.Property<Guid>("CrewMembersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FilmsId")
                        .HasColumnType("uuid");

                    b.HasKey("CrewMembersId", "FilmsId");

                    b.HasIndex("FilmsId");

                    b.ToTable("CrewMemberFilm");
                });

            modelBuilder.Entity("FilmLanguage", b =>
                {
                    b.Property<Guid>("FilmsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguagesId")
                        .HasColumnType("uuid");

                    b.HasKey("FilmsId", "LanguagesId");

                    b.HasIndex("LanguagesId");

                    b.ToTable("FilmLanguage");
                });

            modelBuilder.Entity("ActorFilm", b =>
                {
                    b.HasOne("CommanderGQL.Models.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommanderGQL.Models.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommanderGQL.Models.Command", b =>
                {
                    b.HasOne("CommanderGQL.Models.Plataform", "Plataform")
                        .WithMany("Commands")
                        .HasForeignKey("PlataformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plataform");
                });

            modelBuilder.Entity("CommanderGQL.Models.Film", b =>
                {
                    b.HasOne("CommanderGQL.Models.Director", "Director")
                        .WithMany("Films")
                        .HasForeignKey("DirectorConnection")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");
                });

            modelBuilder.Entity("CountryFilm", b =>
                {
                    b.HasOne("CommanderGQL.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommanderGQL.Models.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrewMemberFilm", b =>
                {
                    b.HasOne("CommanderGQL.Models.CrewMember", null)
                        .WithMany()
                        .HasForeignKey("CrewMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommanderGQL.Models.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilmLanguage", b =>
                {
                    b.HasOne("CommanderGQL.Models.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommanderGQL.Models.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommanderGQL.Models.Director", b =>
                {
                    b.Navigation("Films");
                });

            modelBuilder.Entity("CommanderGQL.Models.Plataform", b =>
                {
                    b.Navigation("Commands");
                });
#pragma warning restore 612, 618
        }
    }
}
